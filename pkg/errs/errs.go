package errs

import (
	"net/http"

	"github.com/danielgtaylor/huma/v2"
)

// ErrorResponse is the error response returned to the client.
type ErrorResponse struct {
	Status  int      `json:"status" example:"400" doc:"HTTP status code"`
	Code    string   `json:"code" example:"entity_exists" doc:"Error code"`
	Message string   `json:"message" example:"user already exists" doc:"Message describing the error"`
	Errors  []string `json:"errors,omitempty" doc:"Optional list of individual error details"`
}

func (e *ErrorResponse) Error() string {
	return e.Message
}

func (e *ErrorResponse) GetStatus() int {
	return e.Status
}

// NewError returns an error with the specified status code, message and an optional list of errors.
// This function is designed for use with huma.NewError to manage errors generated by the application.
func NewError(status int, message string, errs ...error) huma.StatusError {
	errors := make([]string, len(errs))
	for i, err := range errs {
		errors[i] = err.Error()
	}
	return &ErrorResponse{
		Status:  status,
		Code:    HTTPError(status).String(),
		Message: message,
		Errors:  errors,
	}
}

// ResolveError takes an error and resolves it to a huma.StatusError.
//
// If the error is already an *ErrorResponse, it is returned as is.
// Otherwise, it returns an error with a status code of 500 and the message "internal server error".
func ResolveError(err error) huma.StatusError {
	if e, ok := err.(*ErrorResponse); ok {
		return e
	}
	return NewError(http.StatusInternalServerError, "internal server error")
}
