package errs

import (
	"github.com/danielgtaylor/huma/v2"
)

type ApplicationError interface {
	String() string
	HTTPStatus() int
}

// ErrorResponse is the error response returned to the client.
type ErrorResponse struct {
	Status  int      `json:"status" example:"400" doc:"HTTP status code"`
	Code    string   `json:"code" example:"entity_exists" doc:"Error code"`
	Message string   `json:"message" example:"user already exists" doc:"Message describing the error"`
	Errors  []string `json:"errors,omitempty" doc:"Optional list of individual error details"`
}

func (e *ErrorResponse) Error() string {
	return e.Message
}

func (e *ErrorResponse) GetStatus() int {
	return e.Status
}

// NewError returns an error with the specified status code, message and an optional list of errors.
// This function is designed for use with huma.NewError to manage errors generated by the application.
func NewError(status int, message string, errs ...error) huma.StatusError {
	errors := make([]string, len(errs))
	for i, err := range errs {
		errors[i] = err.Error()
	}
	return &ErrorResponse{
		Status:  status,
		Code:    HTTPError(status).String(),
		Message: message,
		Errors:  errors,
	}
}

// NewAppError returns an error with the specified error code and message.
func NewAppError(appErr ApplicationError, message string) huma.StatusError {
	return &ErrorResponse{
		Status:  appErr.HTTPStatus(),
		Code:    appErr.String(),
		Message: message,
	}
}
